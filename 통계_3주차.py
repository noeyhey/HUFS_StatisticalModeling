# -*- coding: utf-8 -*-
"""통계_3주차.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15EOhp-e6bolt2D3yt3kCPBHCCPYsf4Xd
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.datasets import fetch_openml

boston = fetch_openml(name="boston", version=1, as_frame=True)
df = boston.frame
print(df.head())
print(df.describe())

# 모든 변수 쌍 간의 상관관계 확인
corr_matrix = df.corr()

# 히트맵 시각화
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Boston Housing Data Correlation Heatmap')
plt.show()

from scipy.stats import pearsonr

df2 = df[['RM', 'MEDV']].dropna()
corr, p_value = pearsonr(df2['RM'], df2['MEDV'])

# 결과 출력
print(f"Pearson Correlation Coefficient (RM vs MEDV): {corr:.4f}")
print(f"p-value: {p_value:.4f}")

# 유의수준 5%에서 검정 결과 해석
alpha = 0.05
if p_value < alpha:
    print("유의수준 5%에서 RM과 MEDV 사이에 유의미한 상관관계가 있음.")
else:
    print("유의수준 5%에서 RM과 MEDV 사이의 상관관계가 유의미하지 않음.")

# 상관계수 시각화 (산점도)
plt.figure(figsize=(6, 5))
sns.scatterplot(x=df['RM'], y=df['MEDV'], alpha=0.5)  # Pure scatter plot
plt.xlabel('Number of Rooms (RM)')
plt.ylabel('Housing Price (MEDV)')
plt.title(f'Correlation Between Number of Rooms and Housing Price (r = {corr:.4f})')
plt.grid(True)
plt.show()

# 독립 변수(X)와 종속 변수(y) 정의
boston = fetch_openml(name="boston", version=1, as_frame=True)
df = boston.frame
df = df[['RM', 'MEDV']].dropna()
X = df[['RM']].values.reshape(-1, 1) # 방 개수, 2D
y = df['MEDV'] # 주택 가격

# 데이터셋 분할 (훈련 80%, 테스트 20%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 선형 회귀 모델 생성 및 학습
model = LinearRegression()
model.fit(X_train, y_train)

# 회귀 계수 출력
print("회귀 계수:", model.coef_)
print("절편:", model.intercept_)

# 예측 및 평가
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print("평균제곱오차(MSE):", mse)
print("R² Score:", r2_score(y_test, y_pred))

y_pred = model.predict(X_test.reshape(-1, 1))  # Reshape X_test before prediction
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error (MSE):", mse)
print("R² Score:", r2_score(y_test, y_pred))

plt.figure(figsize=(6, 5))
plt.scatter(X_test, y_test, color='blue', alpha=0.5, label="Actual Data")
plt.plot(X_test, y_pred, color='red', linewidth=2, label="Regression Line")
plt.xlabel('Number of Rooms (RM)')
plt.ylabel('Housing Price (MEDV)')
plt.title('Linear Regression: Number of Rooms vs Housing Price')
plt.legend()
plt.grid(True)
plt.show()


# -*- coding: utf-8 -*-
"""통계_4주차.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19KGIMnaebO3Tz288xZEppd8CTLhB_2jc
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score

from scipy.stats import skew

# 데이터 로드
boston = fetch_openml(name="boston", version=1, as_frame=True)
df = pd.DataFrame(boston.data, columns=boston.feature_names)
df['y'] = boston.target

# 데이터 요약
print(df.describe())
print(df.dtypes)

print(type(boston))
print(list(boston))

df['CHAS'][:10]

## 변수별 왜도 -> 분포 확인
# categorical -> float 변환
df['CHAS'] = df['CHAS'].astype(float)
df['RAD'] = df['RAD'].astype(float)

# 왜도 계산
skewness = df.apply(skew).sort_values(ascending=False)
print("\n▶ 변수별 왜도(Skewness):\n", skewness)

# 분포 시각화 + 왜도값 출력
for col in df.columns[:-1]:  # y 제외
    skew_val = skew(df[col])  # 해당 변수의 왜도
    plt.figure(figsize=(10, 4))
    sns.histplot(df[col], kde=True, bins=30, color='skyblue')
    plt.title(f'Distribution: {col} (Skewness: {skew_val:.2f})')
    plt.xlabel(col)
    plt.ylabel('Count')
    plt.grid(True)
    plt.tight_layout()
    plt.show()

df_transformed = df.copy()

# 로그 변환 적용
log_vars = ['CRIM', 'NOX', 'DIS', 'LSTAT']
for col in log_vars:
    df_transformed[col + '_log'] = np.log1p(df[col])

# 제곱근 변환 적용
sqrt_vars = ['AGE', 'TAX', 'PTRATIO']
for col in sqrt_vars:
    df_transformed[col + '_sqrt'] = np.sqrt(df[col] - df[col].min() + 1)

keep_vars = ['RM', 'ZN', 'INDUS', 'CHAS', 'RAD', 'B']

selected_features = [v + '_log' for v in log_vars] + \
                    [v + '_sqrt' for v in sqrt_vars] + \
                    keep_vars

X = df_transformed[selected_features]

#스케일링
# https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

y = df_transformed['y']

from statsmodels.stats.outliers_influence import variance_inflation_factor
# 다중공선성- VIF 계산
vif_df = pd.DataFrame()
vif_df['Feature'] = selected_features
vif_df['VIF_raw'] = [variance_inflation_factor(df[:-1], i) for i in range(len(selected_features))]
vif_df['VIF_pre'] = [variance_inflation_factor(X_scaled, i) for i in range(len(selected_features))]
print(vif_df)

final_features = []

for feat, vif_raw, vif_pre in zip(vif_df['Feature'], vif_df['VIF_raw'], vif_df['VIF_pre']):
    if '_' in feat:  # 변환된 변수라면
        base_feat = feat.split('_')[0]
    else:            # 변환되지 않은 원본 변수
        base_feat = feat

    if vif_raw < vif_pre:
        final_features.append(base_feat)   # 원본 변수 선택
    else:
        final_features.append(feat)        # 변환된 변수 선택

# 최종 feature 데이터프레임 구성
X_final = df_transformed[final_features]

print(X_final.describe())
print(X_final.shape)

# 모델 학습
X_final = X_final.copy()

X_train, X_test, y_train, y_test = train_test_split(
    X_final, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

print("\n▶ 모델 성능")
print("MSE:", mean_squared_error(y_test, y_pred))
print("R² Score:", r2_score(y_test, y_pred))

coeff_df = pd.DataFrame({
    'Feature': X_train.columns,
    'Coefficient': model.coef_
})
print(coeff_df)

# 기존 final_features에서 'CRIM'와 'RAD' 제거
final_features_filtered = [feat for feat in final_features if feat not in ['CRIM', 'RAD']]
print(len(final_features_filtered))

# 제외한 feature로 데이터 구성
X_final = df_transformed[final_features_filtered]
y = df_transformed['y']

# 학습/테스트 분할
X_train, X_test, y_train, y_test = train_test_split(
    X_final, y, test_size=0.2, random_state=42)

# 모델 학습 및 평가
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

print("\n▶ CRIM_log, RAD 제외 후 모델 성능")
print("MSE:", mean_squared_error(y_test, y_pred))
print("R² Score:", r2_score(y_test, y_pred))

coeff_df = pd.DataFrame({
    'Feature': list(X_train.columns) + ['intercept'],
    'Coefficient': list(model.coef_)+[model.intercept_]
})
print(coeff_df)



"""overfitting 방지를 위한 정규화 -> 성능이 더 안좋아짐 -> 굳이 정규화 하지 않아도 됨 (데이터가 그렇게 크지 않기 때문)"""

from sklearn.linear_model import Ridge, Lasso
from sklearn.model_selection import GridSearchCV

# 최종 Feature에서 y 제거
X_final = df_transformed[final_features]
y = df_transformed['y']

# 데이터 분할
X_train, X_test, y_train, y_test = train_test_split(
    X_final, y, test_size=0.2, random_state=42)

# 스케일링
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# 하이퍼파라미터 튜닝을 위한 alpha 후보
alpha_range = {'alpha': np.logspace(-3, 2, 50)}

# Ridge 모델 튜닝 및 학습
ridge = Ridge()
ridge_cv = GridSearchCV(ridge, alpha_range, cv=5, scoring='r2')
ridge_cv.fit(X_train_scaled, y_train)
ridge_best = ridge_cv.best_estimator_
ridge_pred = ridge_best.predict(X_test_scaled)

# Lasso 모델 튜닝 및 학습
lasso = Lasso(max_iter=10000)
lasso_cv = GridSearchCV(lasso, alpha_range, cv=5, scoring='r2')
lasso_cv.fit(X_train_scaled, y_train)
lasso_best = lasso_cv.best_estimator_
lasso_pred = lasso_best.predict(X_test_scaled)

# 성능 출력
print("\n▶ Ridge 회귀 결과")
print("최적 alpha:", ridge_cv.best_params_['alpha'])
print("MSE:", mean_squared_error(y_test, ridge_pred))
print("R² Score:", r2_score(y_test, ridge_pred))

print("\n▶ Lasso 회귀 결과")
print("최적 alpha:", lasso_cv.best_params_['alpha'])
print("MSE:", mean_squared_error(y_test, lasso_pred))
print("R² Score:", r2_score(y_test, lasso_pred))


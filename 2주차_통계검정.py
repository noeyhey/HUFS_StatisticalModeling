# -*- coding: utf-8 -*-
"""2주차_통계검정.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IFPVgJ6nDWcYlO76_8AEAjNLjfYWPNUi
"""

# 실습 - 독립 표본 t-검정
import numpy as np
from scipy.stats import ttest_ind

# 예제: 두 개의 독립된 그룹의 점수 비교 (ex: 남학생 vs 여학생 성적)
np.random.seed(42)

group1 = np.random.normal(loc=75, scale=10, size=30)  # 그룹1 평균 75, 표준편차 10
group2 = np.random.normal(loc=80, scale=10, size=30)  # 그룹2 평균 80, 표준편차 10
# https://numpy.org/doc/2.1/reference/random/generated/numpy.random.normal.html

# 독립 표본 t-검정 수행
stat, p = ttest_ind(group1, group2)
# https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_ind.html

print(f"t-통계량: {stat:.3f}")
print(f"p-value: {p:.3f}")

# 결과 해석
if p > 0.05:
    print("두 그룹 간 평균 차이가 없음 (p > 0.05, 귀무가설 유지)")
else:
    print("두 그룹 간 평균 차이가 있음 (p < 0.05, 귀무가설 기각)")

# 실습 - 대응 표본 t-검정
import numpy as np
from scipy.stats import ttest_rel

# 예제: 같은 그룹의 전후 점수 비교 (ex: 다이어트 전후 체중)
np.random.seed(42)

before = np.random.normal(loc=75, scale=5, size=30)  # 실험 전 평균 75
after  = before - np.random.normal(loc=2, scale=1, size=30)  # 다이어트 후 평균 2kg 감량

# 대응 표본 t-검정 수행
stat, p = ttest_rel(before, after)

print(f"t-통계량: {stat:.3f}")
print(f"p-value: {p:.3f}")

# 결과 해석
if p > 0.05:
    print(" 실험 전후 평균 차이가 없음 (p > 0.05, 귀무가설 유지)")
else:
    print(" 실험 전후 평균 차이가 있음 (p < 0.05, 귀무가설 기각)")

# 실습 - 분산분석
import numpy as np
from scipy.stats import f_oneway

# 예제: 세 개의 브랜드(A, B, C)의 고객 만족도 비교 (1~10점)
np.random.seed(42)  # 재현 가능성을 위해 시드 고정

# 세 개 그룹의 데이터 (30명씩)
brand_A = np.random.normal(loc=7, scale=1.5, size=30)  # 평균 7, 표준편차 1.5
brand_B = np.random.normal(loc=6, scale=1.5, size=30)  # 평균 6, 표준편차 1.5
brand_C = np.random.normal(loc=5, scale=1.5, size=30)  # 평균 5, 표준편차 1.5

# One-Way ANOVA 수행
stat, p = f_oneway(brand_A, brand_B, brand_C)

# 결과 출력
print(f"F-통계량: {stat:.3f}")
print(f"p-value: {p:.3f}")

# 결과 해석
if p > 0.05:
    print("세 그룹 간 평균 차이가 없음 (p > 0.05, 귀무가설 유지)")
else:
    print("세 그룹 간 평균 차이가 있음 (p < 0.05, 귀무가설 기각)")

import numpy as np
import scipy.stats as stats

# 예제: 성별(남/여)과 구매 여부(구매/비구매) 간의 관계 분석
# 2x2 교차표 (contingency table)
# 행: 성별 (남성 / 여성)
# 열: 구매 여부 (구매함 / 구매하지 않음)
data = np.array([[50, 30],  # 남성 (구매함, 구매하지 않음)
                 [20, 40]]) # 여성 (구매함, 구매하지 않음)

# 카이제곱 검정 실행
chi2, p, dof, expected = stats.chi2_contingency(data)

# 결과 출력
print(f"카이제곱 통계량: {chi2:.3f}")
print(f"p-value: {p:.3f}")
print(f"자유도 (degrees of freedom): {dof}")
print(f"기대값 (expected frequencies):\n{expected}")

# 결과 해석
if p > 0.05:
    print("성별과 구매 여부는 독립적임 (p > 0.05, 귀무가설 유지)")
else:
    print("성별과 구매 여부는 관련이 있음 (p < 0.05, 귀무가설 기각)")

import numpy as np
from scipy.stats import pearsonr

# 예제: 두 연속형 변수의 관계 분석
np.random.seed(42)

x = np.random.normal(loc=50, scale=10, size=100)  # 평균 50, 표준편차 10
y = 2 * x + np.random.normal(loc=0, scale=5, size=100)  # y는 x의 2배 + 노이즈

# 피어슨 상관계수 계산
r, p = pearsonr(x, y)

# 결과 출력
print(f"피어슨 상관계수: r={r:.3f}")
print(f"p-value: {p:.3f}")

# 결과 해석
if p > 0.05:
    print("유의미한 상관관계 없음 (p > 0.05)")
else:
    print("유의미한 상관관계 존재 (p < 0.05)")

import numpy as np
from scipy.stats import spearmanr

# 예제: 비선형 관계 데이터 생성
np.random.seed(42)

x = np.random.uniform(1, 100, 100)  # 1~100 사이의 랜덤 값
y = np.log(x) + np.random.normal(0, 0.2, 100)  # 로그 변환한 데이터

# 스피어만 상관계수 계산
rho, p = spearmanr(x, y)

# 결과 출력
print(f"스피어만 상관계수: ρ={rho:.3f}")
print(f"p-value: {p:.3f}")

# 결과 해석
if p > 0.05:
    print("유의미한 상관관계 없음 (p > 0.05)")
else:
    print("유의미한 상관관계 존재 (p < 0.05)")



# 정규성 검정
import numpy as np
from scipy import stats

# 예제 데이터 (정규 분포 데이터)
data = np.random.rand(5)  # 평균 50, 표준편차 10

# 샤피로-윌크 검정
stat, p = stats.shapiro(data)
print(f"샤피로-윌크 검정 결과: W={stat:.3f}, p-value={p:.3f}")

# 정규성 판별
if p > 0.05:
    print("데이터가 정규성을 만족함 (p > 0.05)")
else:
    print("데이터가 정규성을 따르지 않음 (p < 0.05)")

# 등분산 검정
import numpy as np
from scipy import stats

# 두 그룹의 데이터 생성
group1 = np.random.normal(50, 10, 100)
group2 = np.random.normal(55, 15, 100)

# Levene’s Test 실행
stat, p = stats.levene(group1, group2)

print(f"Levene’s 등분산 검정 결과: W={stat:.3f}, p-value={p:.3f}")

# 등분산 판별
if p > 0.05:
    print("두 그룹의 분산이 동일함 (p > 0.05)")
else:
    print("두 그룹의 분산이 다름 (p < 0.05)")



import numpy as np
import scipy.stats as stats
import seaborn as sns
import matplotlib.pyplot as plt

# 랜덤 시드 설정 (재현 가능성)
np.random.seed(42)

# 브랜드별 고객 만족도 데이터 (1~10점 사이, 30명씩)
brand_A = np.random.normal(loc=7, scale=1.5, size=30)  # 평균 7, 표준편차 1.5
brand_B = np.random.normal(loc=6, scale=1.5, size=30)  # 평균 6, 표준편차 1.5
brand_C = np.random.normal(loc=5, scale=1.5, size=30)  # 평균 5, 표준편차 1.5

# 데이터 시각화
plt.figure(figsize=(8,5))
sns.boxplot(data=[brand_A, brand_B, brand_C], palette='Set2')
plt.xticks([0,1,2], ['Brand A', 'Brand B', 'Brand C'])
plt.title('Customer Satisfaction by Brand')
plt.show()

# 정규성 검정 (Shapiro-Wilk Test)
def normality_test(data, brand_name):
    stat, p = stats.shapiro(data)
    print(f"{brand_name} 정규성 검정: W={stat:.3f}, p-value={p:.3f}")
    return p > 0.05

norm_A = normality_test(brand_A, "Brand A")
norm_B = normality_test(brand_B, "Brand B")
norm_C = normality_test(brand_C, "Brand C")

# 등분산 검정 (Levene’s Test)
levene_stat, levene_p = stats.levene(brand_A, brand_B, brand_C)
print(f"\nLevene’s 등분산 검정: W={levene_stat:.3f}, p-value={levene_p:.3f}")

# 정규성과 등분산에 따라 검정법 선택
if norm_A and norm_B and norm_C and levene_p > 0.05:
    print("정규성을 만족하고 등분산을 가정할 수 있으므로 ANOVA 수행")
    stat, p = stats.f_oneway(brand_A, brand_B, brand_C)
    print(f"ANOVA 결과: F={stat:.3f}, p-value={p:.3f}")
else:
    print("\정규성이 부족하거나 등분산이 성립하지 않음, Kruskal-Wallis Test 수행")
    stat, p = stats.kruskal(brand_A, brand_B, brand_C)
    print(f"Kruskal-Wallis 검정 결과: H={stat:.3f}, p-value={p:.3f}")

# 결과 해석
if p > 0.05:
    print("브랜드 간 고객 만족도 차이가 없음 (귀무가설 유지)")
else:
    print("브랜드 간 고객 만족도 차이가 있음 (귀무가설 기각)")